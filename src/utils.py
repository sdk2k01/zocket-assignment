import os
from functools import lru_cache
from re import sub
from typing import Any, List

from llama_index.core import Document
from llama_index.core.agent import FunctionCallingAgent
from llama_index.core.tools import FunctionTool
from llama_index.llms.mistralai import MistralAI
from llama_index.llms.mistralai.base import is_mistralai_function_calling_model
from llama_index.readers.web import BeautifulSoupWebReader

AGENT_PROMPT = """
You are designed to help with the task of extracting the key information from a web page and generating a concise summary.

## **Your Task (Follow These Steps in Order)**
1. **Retrieve Content** – Use the Web Content Extractor to retrieve the full content from the provided URL.
2. **Extract Key Points** – Identify and extract only the most important information using the Key Point Extractor.
3. **Generate a Proper Summary** – This is a required step:
   - **Do not just return key points**.
   - **Rewrite** the extracted information into a **clear, natural, paragraph-style summary** using the Text Summarizer.
   - The summary must be **cohesive, well-structured, and easy to read**, not just a reformatted list.
   - Think of this as explaining the information **to a reader who hasn’t seen the original article**.

## **Rules for Tool Usage**
- **You must use all three tools in the correct order.**
- **Skipping the summarization step is not allowed.**
- The final output **must be a well-formed summary as a plain-text string, not just a list of key points**.

## **Expected Output**
The final response must **only** be the summary generated by the Text Summarizer. Any raw/JSON response must be formatted appropriately to a plain-text string.
**Do not add any additional text, disclaimers, or messages.** The output should be in **paragraph form** and read naturally.
"""


@lru_cache
def _get_default_function_calling_model() -> MistralAI:
    """
    Get default function calling model.
    """
    default_model_name = os.getenv("MISTRAL_MODEL_NAME", "mistral-small-latest")
    if is_mistralai_function_calling_model(default_model_name):
        return MistralAI(model=default_model_name, max_tokens=131000, max_retries=2)
    else:
        return MistralAI(
            model="mistral-small-latest", max_tokens=131000, max_retries=2
        )  # Default function-calling model


def clean_string(text):
    # Remove all tab characters and any surrounding spaces
    text = sub(r"\t\s*", "", text)

    # Replace more than two consecutive newline characters (with any number of spaces in between) with exactly two newlines
    text = sub(r"\n\s*\n\s*\n+", "\n\n", text)

    # Replace multiple spaces with a single space
    text = sub(r" +", " ", text)

    # Remove spaces before newlines
    text = sub(r" \n", "\n", text)

    return text


def get_site_text(sites: List[str]) -> List[Document]:
    return BeautifulSoupWebReader().load_data(sites, include_url_in_text=False)


def get_webpage_content_tool() -> FunctionTool:
    """
    Webpage Content Extractor Function Tool.
    """
    return FunctionTool.from_defaults(
        get_site_text,
        name="web_content_extractor",
        description=(
            "A tool to extract text content from a web page."
            "Args: \nsites (list[str]): The set of websites to extract text from. Mandatory."
        ),
    )


def extract_key_info(page_content: str):
    cleaned_content = clean_string(page_content)
    llm = MistralAI(model="mistral-small-latest")
    prompt = "Extract the key points from the following text and ensure that you donot not miss anything important, please: "
    return llm.complete(f"{prompt} + {cleaned_content}")


def get_key_content_tool() -> FunctionTool:
    """
    Key Content Extractor Function Tool.
    """
    return FunctionTool.from_defaults(
        extract_key_info,
        name="key_content_extractor",
        description=(
            "A tool to extract key information from a web page."
            "Args: \npage_content (str): The web page content string to extract key information from. Mandatory."
        ),
    )


def get_summary(key_info: str):
    llm = MistralAI(model="mistral-small-latest", temperature=0.3)
    prompt = "Generate a concise summary of the following text content: "
    return llm.complete(f"{prompt} + {key_info}")


def get_summary_tool() -> FunctionTool:
    """
    Summarizer Function Tool.
    """
    return FunctionTool.from_defaults(
        get_summary,
        name="text_summarizer",
        description=(
            "A tool to generate a concise summary of the key information extracted from a web page."
            "Args: \nkey_info (str): The key information text to be summarised. Mandatory."
        ),
    )


def get_function_calling_agent(tools: List[Any]) -> FunctionCallingAgent:
    """
    Returns function calling agent from list of tools.
    """
    return FunctionCallingAgent.from_tools(
        tools,
        llm=_get_default_function_calling_model(),
        verbose=True,
        allow_parallel_tool_calls=False,
        system_prompt=AGENT_PROMPT,
    )
